/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telasPrincipais;

import classes.Locacao;
import dados.LocacaoDados;
import java.text.NumberFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Leandro
 */
public class LocacaoPrincipal extends javax.swing.JDialog {

    /**
     * Creates new form FNovaLocacao
     */
    public LocacaoPrincipal(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton3 = new javax.swing.JRadioButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLocacao = new javax.swing.JTable();
        btCadastrar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btDevolver = new javax.swing.JButton();
        btBuscar = new javax.swing.JButton();
        rCPFOuCNPJ = new javax.swing.JRadioButton();
        rPlaca = new javax.swing.JRadioButton();
        txtBusca = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPreco = new javax.swing.JLabel();
        rTodas = new javax.swing.JRadioButton();
        rDevolvidas = new javax.swing.JRadioButton();
        rNãoDevolvidas = new javax.swing.JRadioButton();
        rData = new javax.swing.JRadioButton();
        txtData1 = new javax.swing.JFormattedTextField();
        txtData2 = new javax.swing.JFormattedTextField();
        lblAte = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtSubtotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jRadioButton3.setText("jRadioButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblLocacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Código", "Carro", "Diária (R$)", "Data Locação", "Data Entrega", "Desconto (%)", "Valor total (R$)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLocacao);

        btCadastrar.setText("Cadastrar");
        btCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir locação");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btDevolver.setText("Devolver veículo");
        btDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDevolverActionPerformed(evt);
            }
        });

        btBuscar.setText("Buscar locações");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        buttonGroup1.add(rCPFOuCNPJ);
        rCPFOuCNPJ.setSelected(true);
        rCPFOuCNPJ.setText("CPF/CNPJ");
        rCPFOuCNPJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rCPFOuCNPJActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPlaca);
        rPlaca.setText("Placa");
        rPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPlacaActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Locações Pagas (R$)");

        buttonGroup2.add(rTodas);
        rTodas.setSelected(true);
        rTodas.setText("Todas as locações");
        rTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rTodasActionPerformed(evt);
            }
        });

        buttonGroup2.add(rDevolvidas);
        rDevolvidas.setText("Locações Devolvidas");
        rDevolvidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDevolvidasActionPerformed(evt);
            }
        });

        buttonGroup2.add(rNãoDevolvidas);
        rNãoDevolvidas.setText("Locações não devolvidas");
        rNãoDevolvidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rNãoDevolvidasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rData);
        rData.setText("Data");
        rData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDataActionPerformed(evt);
            }
        });

        try {
            txtData1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        try {
            txtData2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblAte.setText("Até");

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Subtotal :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rCPFOuCNPJ)
                                    .addComponent(rPlaca)
                                    .addComponent(rData))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rTodas)
                                    .addComponent(rDevolvidas)
                                    .addComponent(rNãoDevolvidas))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(296, 296, 296)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(238, 238, 238)
                                        .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(txtPreco))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblAte)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtData2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 74, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(btBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(37, 37, 37)
                        .addComponent(btDevolver)
                        .addGap(18, 18, 18)
                        .addComponent(btExcluir)
                        .addGap(18, 18, 18)
                        .addComponent(btCadastrar)
                        .addGap(23, 23, 23))))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rTodas)
                    .addComponent(rCPFOuCNPJ)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPreco)
                    .addComponent(rPlaca)
                    .addComponent(rDevolvidas)
                    .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rNãoDevolvidas)
                    .addComponent(rData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAte))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCadastrar)
                    .addComponent(btExcluir)
                    .addComponent(btDevolver)
                    .addComponent(btBuscar)
                    .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
         FCadLocacao c = new FCadLocacao(frame,true);
         c.setLocationRelativeTo(null);
         Locacao locacao = c.execute();
       
         if(locacao != null && locacao.getCarro().isLocado()==true){
             LocacaoDados.lstLocacao.add(locacao);
             this.carregarTbLocacao(LocacaoDados.lstLocacao);
             
         }
    }//GEN-LAST:event_btCadastrarActionPerformed

    private void btDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDevolverActionPerformed
        try {
            if(LocacaoDados.lstLocacao.size() > 0){
                int codigo =Integer.parseInt(tblLocacao.getValueAt(tblLocacao.getSelectedRow(), 1).toString());
                        
                Locacao loc = LocacaoDados.obterLocacaoPeloCodigo(
                        codigo,LocacaoDados.lstLocacao);
                  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MMMM/yyyy");
                  LocalDate dataAtual =LocalDate.now();
                //  LocalDate entrega = LocalDate.now();
                  if(loc != null && loc.getDtEntrega()== null){
                      if(JOptionPane.showConfirmDialog(this,
                            "Deseja devolver o veículo de Placa : " + loc.getCarro().getPlaca() + " ?\n" + 
                                    "Informações:\n" +
                                    "Dias Locado: " + loc.diasLocados() + "\n" + 
                                    "Dia Locação: " + loc.getDtLocacao().format(formatter) + "\n" + 
                                    "Dia Entrega: " + dataAtual.format(formatter) + "\n" + 
                                    "Valor Total: " + loc.calcularCusto(),
                            "Cadastro",
                            JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                        //  LocalDate dataAtual =LocalDate.now();
                          loc.setDtEntrega(dataAtual);
                          loc.calcularCusto();
                          loc.getCarro().setLocado(false);
                          this.carregarTbLocacao(LocacaoDados.lstLocacao);

                          LocacaoDados.locacoesNaTela(LocacaoDados.lstLocacao);
                      }else{
                          
                      }
                      
                }else if(loc.getDtEntrega()!= null){
                    JOptionPane.showMessageDialog(null, "Locação já devolvida");
                }
            }
          
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Não foi possível devolver a locação.\n\n" + 
                            e.getMessage(),"ERRO",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btDevolverActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        try {
            if(LocacaoDados.lstLocacao.size() > 0){
                
                int codigo =Integer.parseInt(tblLocacao.getValueAt(tblLocacao.getSelectedRow(), 1).toString());
                        
                Locacao loc = LocacaoDados.obterLocacaoPeloCodigo(
                        codigo,LocacaoDados.lstLocacao);
                LocalDateTime atual = LocalDateTime.now(); // cria uma variável com a hora atual 
                // verifica a diferença entre a hora atual e a de locação
                Duration duration = Duration.between(loc.getExclusão(),atual); 

                
         
                if(loc != null && duration.getSeconds()< 3600 && loc.getDtEntrega()== null){ // verifica se a duração é menor que 3600s(1h)
                     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MMMM/yyyy HH:mm");
                    if(JOptionPane.showConfirmDialog(this, 
                            "Deseja apagar a locação de placa:  " + loc.getCarro().getPlaca() + "?\n "
                            + "Só é possível excluir o cadastro até as " + loc.getExclusão().plusHours(1).format(formatter), 
                            "Locação", 
                            JOptionPane.YES_NO_OPTION, 
                                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                        loc.getCarro().setLocado(false); // remove o carro como locado 
                        LocacaoDados.lstLocacao.remove(loc);
                        this.carregarTbLocacao(LocacaoDados.lstLocacao);                
                    }
                }else{
                    if(loc.getDtEntrega()!= null){
                        JOptionPane.showMessageDialog(null,"Locação já devolvida");
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "Não é possível excluir a Locação com mais de 1 hora de cadastro");
                    }
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Não foi possível excluir a locação.\n\n" + 
                            e.getMessage(),"ERRO",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
       
        if(rCPFOuCNPJ.isSelected()){        //-----------BUSCA CPF---------------
            if(rTodas.isSelected()){ // todas as locações
                if(txtBusca.getText().trim().equals("")){
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                    List<Locacao> locTemp = 
                            LocacaoDados.obterCPFOuCNPJParcial(
                                    txtBusca.getText().trim(),
                                    LocacaoDados.lstLocacao);
                    if(locTemp.size()>0){
                        this.carregarTbLocacao(locTemp);
                    }else{
                        JOptionPane.showMessageDialog(null,"Não foram encontrados Clientes com esse CPF/CNPJ");
                    }   
                }
            }else if (rDevolvidas.isSelected()){ // locações devolvidas
                if(txtBusca.getText().trim().equals("")){
                    // se o campo de busca estiver em branco retorna todas as locações
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                        List<Locacao> locTemp = 
                        LocacaoDados.obterCPFOuCNPJParcial(
                                txtBusca.getText().trim(),
                                LocacaoDados.lstLocacao);
                if(locTemp.size()> 0){
                    List<Locacao> locacaoDevolvida = new ArrayList<>();
                    for (Locacao locacao : locTemp) {
                        if(locacao.getDtEntrega() != null && locacao.getCarro().isLocado() == false){
                            locacaoDevolvida.add(locacao);
                        }
                    }
                    if(locacaoDevolvida.size()>0){
                        this.carregarTbLocacao(locacaoDevolvida);
                    }else if(locacaoDevolvida.size() == 0){
                        JOptionPane.showMessageDialog(null,"Não foram encontrados Clientes com esse CPF/CNPJ");
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null,"Não foram encontrados Clientes com esse CPF/CNPJ");
                }
                }

            }else if(rNãoDevolvidas.isSelected()){ // locações não devolvidas
                if(txtBusca.getText().trim().equals("")){
                    // se o campo de busca estiver em branco retorna todas as locações
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                        List<Locacao> locTemp = 
                        LocacaoDados.obterCPFOuCNPJParcial(
                                txtBusca.getText().trim(),
                                LocacaoDados.lstLocacao);
                    if(locTemp.size()> 0 ){
                        List<Locacao> locacaoNaoDevolvida = new ArrayList<>();
                        for (Locacao locacao : locTemp) {
                            if(locacao.getDtEntrega() == null && locacao.getCarro().isLocado() == true){
                                locacaoNaoDevolvida.add(locacao);
                            }
                        }if(locacaoNaoDevolvida.size()>0){
                            this.carregarTbLocacao(locacaoNaoDevolvida);
                        }else if(locacaoNaoDevolvida.size()== 0){
                            JOptionPane.showMessageDialog(null,"Não foram encontrados Clientes com esse CPF/CNPJ");
                        }
                        
                    }else{
                        JOptionPane.showMessageDialog(null,"Não foram encontrados Clientes com esse CPF/CNPJ");
                    }
                }
            }

        }else if(rPlaca.isSelected()){          //-------BUSCA PLACA--------------   
                if(rTodas.isSelected()){
                    if(txtBusca.getText().trim().equals("")){
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                    }else{
                         List<Locacao> locTemp = 
                            LocacaoDados.obterPlacaParcial(
                            txtBusca.getText().trim(),
                            LocacaoDados.lstLocacao,
                            false);
                        if(locTemp.size()>0){
                            this.carregarTbLocacao(locTemp);
                        }else{
                            JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                        }
                    }
                }else if(rDevolvidas.isSelected()){
                    if(txtBusca.getText().trim().equals("")){            
                        this.carregarTbLocacao(LocacaoDados.lstLocacao); 
                    }else{
                         List<Locacao> locTemp = 
                            LocacaoDados.obterPlacaParcial(
                            txtBusca.getText().trim(),
                            LocacaoDados.lstLocacao,
                            false);
                        if(locTemp.size()>0){
                            List<Locacao> locacaoDevolvida = new ArrayList<>();
                            for (Locacao locacao : locTemp) {
                                if(locacao.getDtEntrega() != null && locacao.getCarro().isLocado() == false){
                                locacaoDevolvida.add(locacao);   
                                }
                            }if(locacaoDevolvida.size()>0){
                                this.carregarTbLocacao(locacaoDevolvida);
                            }else if(locacaoDevolvida.size() == 0){
                                JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                            }
                            
                            tblLocacao.repaint();
                        }else{
                            JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                        }
                    }
                }else if (rNãoDevolvidas.isSelected()){
                    if(txtBusca.getText().trim().equals("")){      
                        this.carregarTbLocacao(LocacaoDados.lstLocacao); 
                    }else{
                         List<Locacao> locTemp = 
                            LocacaoDados.obterPlacaParcial(
                            txtBusca.getText().trim(),
                            LocacaoDados.lstLocacao,
                            false);
                        if(locTemp.size()>0){
                            List<Locacao> locacaoNaoDevolvida = new ArrayList<>();
                            for (Locacao locacao : locTemp) {
                                if(locacao.getDtEntrega() == null && locacao.getCarro().isLocado() == true){ 
                                locacaoNaoDevolvida.add(locacao);
                                }
                            }if(locacaoNaoDevolvida.size()>0){
                                this.carregarTbLocacao(locacaoNaoDevolvida);
                            }else if (locacaoNaoDevolvida.size()==0){
                                JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                            }                   
                        }else{
                            JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                        }
                    }
                }       
        }else if (rData.isSelected()){ //-------------busca entre duas datas-------------
            if(rTodas.isSelected()){
                if(txtData1.getText().trim().contains("/  /")|| txtData2.getText().trim().contains("/  /")){     
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDate dataInicio = LocalDate.parse(txtData1.getText(),formatter);
                    LocalDate dataFim = LocalDate.parse(txtData2.getText(), formatter);

                    List<Locacao> locTemp = LocacaoDados.obterLocacaoPelaData(
                        dataInicio,
                        dataFim, 
                        LocacaoDados.lstLocacao);
                
                if(locTemp.size() > 0){
                    List<Locacao> loc = new ArrayList<>();
                    for (Locacao locacao : locTemp) {
                        loc.add(locacao);
                    }
                    this.carregarTbLocacao(loc);
                }else{
                     JOptionPane.showMessageDialog(null,"Não foram encontrados locações entre essas datas");
                    }
            }
            }else if(rDevolvidas.isSelected()){

                if(txtData1.getText().trim().contains("/  /")|| txtData2.getText().trim().contains("/  /")){                    
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDate dataInicio = LocalDate.parse(txtData1.getText(),formatter);
                    LocalDate dataFim = LocalDate.parse(txtData2.getText(), formatter);
                
                        List<Locacao> locTemp = LocacaoDados.obterLocacaoPelaData(
                        dataInicio,
                        dataFim, 
                        LocacaoDados.lstLocacao);
                        if(locTemp.size() > 0){
                            List<Locacao> loc = new ArrayList<>();
                            for (Locacao locacao : locTemp) {
                                if(locacao.getDtEntrega() != null){ // se a data de entrega não é nula então o carro foi devolvido
                                    loc.add(locacao);
                                }else if (locTemp.isEmpty()){
                                    JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                                }
                            }
                            this.carregarTbLocacao(loc);
                        }
                        else{
                            JOptionPane.showMessageDialog(null,"Não foram encontrados locações entre essas datas");
                        }
                }
            }else if(rNãoDevolvidas.isSelected()){
                 if(txtData1.getText().trim().contains("/  /")|| txtData2.getText().trim().contains("/  /")){
                    this.carregarTbLocacao(LocacaoDados.lstLocacao);
                }else{
                     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDate dataInicio = LocalDate.parse(txtData1.getText(),formatter);
                    LocalDate dataFim = LocalDate.parse(txtData2.getText(), formatter);
                
                        List<Locacao> locTemp = LocacaoDados.obterLocacaoPelaData(
                        dataInicio,
                        dataFim, 
                        LocacaoDados.lstLocacao);
                    if(locTemp.size() > 0){
                        List<Locacao> loc = new ArrayList<>();
                        for (Locacao locacao : locTemp) {
                            if(locacao.getDtEntrega() == null){
                                loc.add(locacao);
                            }else if (locTemp.isEmpty()){
                                JOptionPane.showMessageDialog(null,"Não foram encontrados Carros com essa placa");
                            }
                        }
                        this.carregarTbLocacao(loc);    
                    }else{
                        JOptionPane.showMessageDialog(null,"Não foram encontrados locações entre essas datas");
                    }
    }//GEN-LAST:event_btBuscarActionPerformed
            }
        }
    }
                 
                 
                 
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtData2.setVisible(false);
        txtData1.setVisible(false);
        lblAte.setVisible(false);
      // this.mostraPreco(LocacaoDados.lstLocacao);
      
       this.carregarTbLocacao(LocacaoDados.lstLocacao);
    }//GEN-LAST:event_formWindowOpened

    private void rCPFOuCNPJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rCPFOuCNPJActionPerformed
       if(rCPFOuCNPJ.isSelected()){
           txtBusca.setVisible(true);
           txtData1.setText("");
           txtData2.setText("");
           txtData1.setVisible(false);
           txtData2.setVisible(false);
           lblAte.setVisible(false);
       }
    }//GEN-LAST:event_rCPFOuCNPJActionPerformed

    private void rDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDataActionPerformed
       if(rData.isSelected()){
           txtBusca.setVisible(false);
           txtData1.setText("");
           txtData2.setText("");
           txtData1.setVisible(true);
           txtData2.setVisible(true);
           lblAte.setVisible(true);
       }
      
    }//GEN-LAST:event_rDataActionPerformed

    private void rPlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPlacaActionPerformed
       if(rPlaca.isSelected()){
           txtBusca.setVisible(true);
           txtData1.setText("");
           txtData2.setText("");
           txtData1.setVisible(false);
           txtData2.setVisible(false);
           lblAte.setVisible(false);
       }
    }//GEN-LAST:event_rPlacaActionPerformed

    private void rTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rTodasActionPerformed
        if(rTodas.isSelected()){
            txtData1.setText("");
            txtData2.setText("");
        }
    }//GEN-LAST:event_rTodasActionPerformed

    private void rDevolvidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDevolvidasActionPerformed
        if(rDevolvidas.isSelected()){
            txtData1.setText("");
            txtData2.setText("");
        }
    }//GEN-LAST:event_rDevolvidasActionPerformed

    private void rNãoDevolvidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rNãoDevolvidasActionPerformed
        if(rNãoDevolvidas.isSelected()){
            txtData1.setText("");
            txtData2.setText("");
        }
    }//GEN-LAST:event_rNãoDevolvidasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
        
  /*  private void mostraPreco(List<Locacao> lstLocacoes){
        try {
            int valorTotal = 0;
            for (Locacao locacao : lstLocacoes) {
                valorTotal += locacao.getValorTotalLocacao();
                        
            }
            txtPreco.setText(Integer.toString(valorTotal));
        } catch (Exception e) {
        }
    }*/
    
    private void carregarTbLocacao(List<Locacao> lstLocacao){
        try {
            DefaultTableModel modelo = (DefaultTableModel)tblLocacao.getModel();
            modelo.getDataVector().removeAllElements();
            List<Locacao> listTempLocacao = new ArrayList<>();
            for (int i = 0; i < lstLocacao.size(); i++) {
                Locacao locacao = lstLocacao.get(i);
                listTempLocacao.add(locacao);
                Vector v = new Vector();
                v.add(locacao.getCliente().informacoes());
                v.add(locacao.getCodigo());
                v.add(locacao.getCarro().informacao());
                v.add(locacao.getCarro().getValorDiariaLocacao());
                v.add(locacao.getDtLocacao().format(DateTimeFormatter.ofPattern("dd/MMMM/yyyy")));
                if(locacao.getDtEntrega()!=null){
                    v.add(locacao.getDtEntrega().format(DateTimeFormatter.ofPattern("dd/MMMM/yyyy")));
                    
                    if(locacao.getCliente().getDtNascOuDesc().contains("/")){
                        v.add(0);
                    }else{
                        v.add(locacao.getCliente().getDtNascOuDesc());
                    }
                    v.add(locacao.getValorTotalLocacao());
                }
                
               
                
                modelo.addRow(v);
            }
            tblLocacao.repaint();
            Locale localeBR = new Locale( "pt", "BR" );  
            NumberFormat dinheiroBR = NumberFormat.getCurrencyInstance(localeBR);
            this.txtSubtotal.setText(dinheiroBR.format(LocacaoDados.subTotal(listTempLocacao)));
            this.txtPreco.setText(dinheiroBR.format(LocacaoDados.locacoesNaTela(lstLocacao)));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Não foi possível carregar a lista de locações.\n\n" + 
                            e.getMessage(),"ERRO",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /***
     *BOTÃO ALTERAR
     *  try {
            if (DadosLocacoes.lstLocacao.size() > 0) {
                Integer codigo = Integer.parseInt(tabelaLocacao1.getValueAt(tabelaLocacao1.getSelectedRow(), 0).toString());
                Locacao loc = DadosLocacoes.obterLocacaoPeloCodigo(codigo, DadosLocacoes.lstLocacao);
                if (loc != null) {
                    if (JOptionPane.showConfirmDialog(this, "Deseja alterar a locação código: " + loc.getCodigo()
                            + "?", "Cadastro", JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                        FCadastroLocacao cadastro = new FCadastroLocacao(this, true);
                        Locacao locacao = cadastro.execute(loc);
                        this.carregarTabelaLocacoes1(DadosLocacoes.lstLocacao);
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Não foi possível alterar a locacao. \n \n"
                    + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
     ***
     * 
     */
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocacaoPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocacaoPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocacaoPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocacaoPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LocacaoPrincipal dialog = new LocacaoPrincipal(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btCadastrar;
    private javax.swing.JButton btDevolver;
    private javax.swing.JButton btExcluir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAte;
    private javax.swing.JRadioButton rCPFOuCNPJ;
    private javax.swing.JRadioButton rData;
    private javax.swing.JRadioButton rDevolvidas;
    private javax.swing.JRadioButton rNãoDevolvidas;
    private javax.swing.JRadioButton rPlaca;
    private javax.swing.JRadioButton rTodas;
    private javax.swing.JTable tblLocacao;
    private javax.swing.JTextField txtBusca;
    private javax.swing.JFormattedTextField txtData1;
    private javax.swing.JFormattedTextField txtData2;
    private javax.swing.JLabel txtPreco;
    private javax.swing.JTextField txtSubtotal;
    // End of variables declaration//GEN-END:variables
}
